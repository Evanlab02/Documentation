{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GitTogether","text":"<p>GitTogether is a tool for managing and viewing your GitHub PRs.</p> <p>NOTE: Still very much under development, so not much to see here.</p>"},{"location":"#stack","title":"Stack","text":"<p>This project leverages a range of technologies across both client and server sides for robust and flexible functionality:</p>"},{"location":"#containerization","title":"Containerization","text":"<ul> <li>Docker</li> <li>Docker Compose</li> </ul>"},{"location":"#backend","title":"Backend","text":"<ul> <li>PHP</li> <li>Laravel</li> </ul>"},{"location":"#frontend","title":"Frontend","text":"<ul> <li>TypeScript</li> <li>React</li> <li>Vite</li> </ul>"},{"location":"#getting-started-quick-start","title":"Getting Started (Quick Start)","text":"<p>You will need php, docker and docker compose installed to run this project.</p>"},{"location":"#1-clone-the-repository","title":"1. Clone the repository","text":"<pre><code>git clone git@github.com:Evanlab02/GitTogether.git\n</code></pre>"},{"location":"#2-create-env-files","title":"2. Create .env files","text":"<p>First you will need to create <code>.env</code> in the root directory of the project. Below you can find a generic example that will work for quick-setup.</p> <pre><code># POSTGRES CONFIG\nPOSTGRES_PASSWORD=iamadmin\nPOSTGRES_DB=gt-database\nPOSTGRES_USER=postgres\n\n# PGADMIN CONFIG\nPGADMIN_DEFAULT_EMAIL=user@gmail.com\nPGADMIN_DEFAULT_PASSWORD=iamadmin\n</code></pre> <p>You will also need to create a file in the app directory (<code>./app/.env.production</code>). Below you can find a generic example that will work for quick-setup.</p> <p>NOTE: This does not include an app key, you will need to run the following command in the app directory to generate one: <code>php artisan key:generate --env production</code></p> <pre><code>APP_NAME=GitTogether\nAPP_ENV=production\nAPP_KEY=\nAPP_DEBUG=false\nAPP_TIMEZONE=UTC\nAPP_URL=http://localhost:80\n\nAPP_LOCALE=en\nAPP_FALLBACK_LOCALE=en\nAPP_FAKER_LOCALE=en_US\n\nAPP_MAINTENANCE_DRIVER=file\n# APP_MAINTENANCE_STORE=database\n\nPHP_CLI_SERVER_WORKERS=4\n\nBCRYPT_ROUNDS=12\n\nLOG_CHANNEL=stack\nLOG_STACK=single\nLOG_DEPRECATIONS_CHANNEL=null\nLOG_LEVEL=debug\n\nDB_CONNECTION=pgsql\nDB_HOST=database\nDB_PORT=5432\nDB_DATABASE=gt-database\nDB_USERNAME=postgres\nDB_PASSWORD=iamadmin\n\nSESSION_DRIVER=database\nSESSION_LIFETIME=120\nSESSION_ENCRYPT=false\nSESSION_PATH=/\nSESSION_DOMAIN=null\n\nBROADCAST_CONNECTION=log\nFILESYSTEM_DISK=local\nQUEUE_CONNECTION=database\n\nCACHE_STORE=database\nCACHE_PREFIX=\n\nMEMCACHED_HOST=127.0.0.1\n\nREDIS_CLIENT=phpredis\nREDIS_HOST=127.0.0.1\nREDIS_PASSWORD=null\nREDIS_PORT=6379\n\nMAIL_MAILER=log\nMAIL_HOST=127.0.0.1\nMAIL_PORT=2525\nMAIL_USERNAME=null\nMAIL_PASSWORD=null\nMAIL_ENCRYPTION=null\nMAIL_FROM_ADDRESS=\"hello@example.com\"\nMAIL_FROM_NAME=\"${APP_NAME}\"\n\nAWS_ACCESS_KEY_ID=\nAWS_SECRET_ACCESS_KEY=\nAWS_DEFAULT_REGION=us-east-1\nAWS_BUCKET=\nAWS_USE_PATH_STYLE_ENDPOINT=false\n\nVITE_APP_NAME=\"${APP_NAME}\"\n</code></pre>"},{"location":"#3-start-compose-stack","title":"3. Start compose stack","text":"<p>Start compose stack with the following command: <code>make up</code></p>"},{"location":"#4-apply-migrations","title":"4. Apply migrations","text":"<p>Apply migrations with <code>make migrate</code></p>"},{"location":"#5-use-the-app","title":"5. Use the app","text":"<p>Open your browser and navigate to <code>http://localhost:80</code> to start managing your pull requests.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please open an issue or submit a pull request.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License. See the LICENSE file for details.</p>"},{"location":"ROADMAP/","title":"Roadmap","text":"<p>Below you can find the outline of the projects roadmap.</p>"},{"location":"ROADMAP/#v010","title":"V0.1.0","text":"<ul> <li>Improve developer environment </li> <li>Add PgAdmin to compose files </li> <li>Profiles pages <ul> <li>Profile creation page </li> <li>Profile view page </li> <li>Profile edit page </li> <li>Profile delete </li> </ul> </li> <li>Tokens pages <ul> <li>Token creation page </li> <li>Token view page </li> <li>Token edit page </li> <li>Token delete page </li> </ul> </li> <li>Synchronized repositories pages <ul> <li>Repo creation page </li> <li>Repo view page </li> <li>Repo edit page </li> <li>Repo delete page </li> </ul> </li> <li>Overview Page <ul> <li>Skeleton filters + The addition of profile filter </li> <li>Skeleton charts </li> <li>Skeleton tables </li> <li>Repository functionality for caching/retrieving GitHub PR data. </li> <li>Table endpoints </li> <li>Table implementations </li> <li>Filters implementations </li> <li>Charts endpoint </li> <li>Charts implementations </li> </ul> </li> </ul>"},{"location":"dev/","title":"Getting Started","text":"<p>Before you will be able to run a local dev server, you will need to create .env file with configuration values in the app directory.</p> <p>Below is a generic example.</p> <p>NOTE: This does not include an app key, you will need to run the following command in the app directory to generate one: <code>php artisan key:generate</code></p> <pre><code>APP_NAME=GitTogether\nAPP_ENV=local\nAPP_KEY=\nAPP_DEBUG=true\nAPP_TIMEZONE=UTC\nAPP_URL=http://localhost:8000\n\nAPP_LOCALE=en\nAPP_FALLBACK_LOCALE=en\nAPP_FAKER_LOCALE=en_US\n\nAPP_MAINTENANCE_DRIVER=file\n# APP_MAINTENANCE_STORE=database\n\nPHP_CLI_SERVER_WORKERS=4\n\nBCRYPT_ROUNDS=12\n\nLOG_CHANNEL=stack\nLOG_STACK=single\nLOG_DEPRECATIONS_CHANNEL=null\nLOG_LEVEL=debug\n\nDB_CONNECTION=pgsql\nDB_HOST=localhost\nDB_PORT=5432\nDB_DATABASE=gt-database\nDB_USERNAME=postgres\nDB_PASSWORD=iamadmin\n\nSESSION_DRIVER=database\nSESSION_LIFETIME=120\nSESSION_ENCRYPT=false\nSESSION_PATH=/\nSESSION_DOMAIN=null\n\nBROADCAST_CONNECTION=log\nFILESYSTEM_DISK=local\nQUEUE_CONNECTION=database\n\nCACHE_STORE=database\nCACHE_PREFIX=\n\nMEMCACHED_HOST=127.0.0.1\n\nREDIS_CLIENT=phpredis\nREDIS_HOST=127.0.0.1\nREDIS_PASSWORD=null\nREDIS_PORT=6379\n\nMAIL_MAILER=log\nMAIL_HOST=127.0.0.1\nMAIL_PORT=2525\nMAIL_USERNAME=null\nMAIL_PASSWORD=null\nMAIL_ENCRYPTION=null\nMAIL_FROM_ADDRESS=\"hello@example.com\"\nMAIL_FROM_NAME=\"${APP_NAME}\"\n\nAWS_ACCESS_KEY_ID=\nAWS_SECRET_ACCESS_KEY=\nAWS_DEFAULT_REGION=us-east-1\nAWS_BUCKET=\nAWS_USE_PATH_STYLE_ENDPOINT=false\n\nVITE_APP_NAME=\"${APP_NAME}\"\n</code></pre>"},{"location":"dev/#running-locally","title":"Running locally","text":"<p>Once this is done, you can run: <code>make dev</code> in the app directory.</p> <p>NOTE: This command will only work if you have php, composer, npm, docker and docker compose installed. These are all pre-requisites for local development.</p> <p>This command will install the dependencies if they do not exist, start a local postgres instance and run the application.</p> <p>Once everything is running, you should run <code>php artisan migrate</code> to apply the migrations.</p> <p>In future, if possible, I would like to use SQLite for local development as this will remove the dependency on docker for development.</p>"},{"location":"project/","title":"Project Outline - V1","text":"<p>The project will should allow users to do the following things in the V1 release:</p> <ul> <li>List all pull requests for the repos they specify.<ul> <li>They will have the following fields shown:<ul> <li>PR ID and link</li> <li>Organization</li> <li>Repository</li> <li>State</li> <li>Title</li> <li>PR opener</li> </ul> </li> <li>Two charts<ul> <li>PRs by state</li> <li>PRs by organization</li> </ul> </li> <li>The user will be allowed to filter out repositories based on different fields, they should be able to filter by:<ul> <li>Organization</li> <li>Repository</li> <li>State (Open by default)</li> <li>User type of pull request creator (User by default)</li> <li>If you have been assigned a reviewer. (True by default)</li> </ul> </li> <li>The should also be allowed to sort the results.</li> </ul> </li> <li>View the details of a specific pull request.<ul> <li>There should be the following elements on this page<ul> <li>Heading with the title of the PR</li> <li>Card with the state</li> <li>Card with the PR opener</li> <li>Card with number of commits</li> <li>Card with number of additions</li> <li>Card with number of deletions</li> <li>Card with changed files</li> <li>Tab Component<ul> <li>PR reviewers</li> <li>Line chart with commit overview</li> </ul> </li> <li>Tab Component<ul> <li>Conversation/Comments panel</li> <li>Conversation/Reviews panel</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"project/#setting-up-users","title":"Setting up users","text":"<p>Users will be able to create \"GitHub Profiles\" associated to their account/user. These GitHub Profiles will align to a existing GitHub profile.</p> <p>This is to allow users to create different profiles for work and personal accounts as an example.</p> <p>These will require the following fields:</p> <ul> <li>ID (primary key)</li> <li>Name (Ex. Evanlab02)</li> <li>Project user (foreign key)</li> </ul>"},{"location":"project/#setting-up-tokens","title":"Setting up tokens","text":"<p>The API will force using GH tokens to request data from the API.</p> <p>Therefore you will need to create records with the GitHub API tokens. You can create your own names for these.</p> <ul> <li>ID (Primary key)</li> <li>Name (Ex. My personal token/My work token)</li> <li>Token (The GH token)</li> <li>Project user (foreign key)</li> </ul>"},{"location":"project/#setting-up-synchronized-repositories","title":"Setting up synchronized repositories","text":"<p>You will also need to tell the API which repositories it should use. This will link to your profile and tokens. The profile part will enable us to differentiate things like comments indicating your comments different than other users comments.</p> <ul> <li>ID (Primary key)</li> <li>Organization (Ex. Evanlab02)</li> <li>Repository (Ex. GitTogether)</li> <li>GitHub Profile (Foreign Key)</li> <li>GitHub Token (Foreign Key)</li> <li>Project user (foreign key)</li> </ul>"},{"location":"project/#pull-requests-list-view","title":"Pull requests - List View","text":""},{"location":"project/#getting-the-data","title":"Getting the data","text":"<p>To retrieve this data, we will be using the GitHub pull requests API.</p> <p>API Documentation</p> <pre><code>curl -L \\\n  -H \"Accept: application/vnd.github+json\" \\\n  -H \"Authorization: Bearer &lt;YOUR-TOKEN&gt;\" \\\n  -H \"X-GitHub-Api-Version: 2022-11-28\" \\\n  https://api.github.com/repos/OWNER/REPO/pulls\n</code></pre>"},{"location":"project/#filters-and-charts","title":"Filters and Charts","text":"<p>To calculate the filters, we should only require the values that have been manually configured by the user.</p> <p>For the charts, we will be able to calculate this from the values we have received from the GitHub API.</p>"},{"location":"project/#table","title":"Table","text":"<p>The tables are pretty standard except for 2 things</p> <p>In the repository table, we will have 2 buttons in the actions column that does two things:</p> <ul> <li>Resync for organization</li> <li>Resync for repository</li> </ul> <p>What this will do, is just destroy the old cached value(s) for a repository or organization, and then re-query and cache them.</p> <p>We will also have a button on the PR table that will take you directly to the GitHub pull request.</p>"},{"location":"project/#caching","title":"Caching","text":"<p>The GitHub API only allows requests for a single repositories pull requests and there is rate limiting on the GitHub API. So we will need to ensure that these requests are cached.</p> <p>All results will be cached for 1 hour. This helps the application only pull what it needs at the time.</p>"},{"location":"project/#how-we-will-cache","title":"How we will cache","text":"<p>If we use something like Redis, the key will be something like</p> <p><code>&lt;org&gt;-&lt;repo&gt;-prs</code> with a value of the API response payload.</p>"},{"location":"project/#pull-requests-detail-view","title":"Pull requests - Detail View","text":"<p>This page will also use caching. Which will be covered below.</p> <p></p> <p></p>"},{"location":"project/#cards","title":"Cards","text":"<p>Here we will outline some key details about the PR.</p> <p>There will be buttons on the state card that will allow you to view the PR or resync it.</p>"},{"location":"project/#caching_1","title":"Caching","text":"<p>If we use something like Redis, the key will be something like</p> <p><code>&lt;org&gt;-&lt;repo&gt;-pr-&lt;number&gt;</code> with a value of the API response payload.</p>"}]}