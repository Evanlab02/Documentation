{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ShoppingListApp","text":"<p>Welcome to the ShoppingListApp! \ud83c\udf89</p>"},{"location":"#overview","title":"Overview","text":"<p>Ever found yourself staring at a shopping list that just doesn't cut it? Same here! That's why I created this app \u2014 because I could never find a ShoppingListApp that met my needs. This is a personal project born out of sheer frustration (and maybe a little too much time spent on the couch). </p> <p>This app allows households to share items, stores, and shopping lists with each other, all while keeping an eye on that budget. Say goodbye to the chaos of last-minute shopping trips and missed items! With ShoppingListApp, you can collaboratively manage your shopping endeavors like a pro. \ud83d\uded2\ud83d\udcb8</p> <p>IMPORTANT: ShoppingListApp is a hobby project and is not intended to be run in a production environment, it was made with a home network in mind. If you do run this in a production environment, do so at your own risk. You are welcome to adjust the code to suit your needs or create your own implementation using some of the code that is part of this project.</p> <p>NOTE: ShoppingListApp is still under development and still on its way to V1 release.</p> <p>NOTE: Unfortunately, ShoppingListApp will have poor mobile support with the V1 release, this will be addressed in V2.</p>"},{"location":"#tech-stack","title":"Tech Stack","text":"<ul> <li>Backend: Python</li> <li>Frontend: React</li> <li>Containerization: Docker</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Share Items: Allow others to use shopping items easily that you have created.</li> <li>Store Management: Keep track of your favorite stores and their offerings.</li> <li>Collaborative Lists: Create shopping lists that everyone can access and update.</li> <li>Budget Tracking: Manage your household budget together \u2014 because money matters!</li> </ul>"},{"location":"#why","title":"Why?","text":"<p>Because I wanted to! \ud83c\udf88 I built this app to solve a problem I faced and to learn something new along the way. Plus, it was a fun distraction from my usual coding routine. </p> <p>Feel free to check it out, contribute, or just laugh at my coding choices. Happy shopping! \ud83d\udecd\ufe0f</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Please take a look at the docs to get started, you can view them here</p> <p>Also remember that the docs are also available on the ShoppingListApp when running it at <code>&lt;host&gt;/docs/</code></p>"},{"location":"start/","title":"Getting Started","text":"<p>Welcome to the ShoppingListApp! \ud83c\udf89 Please note that this app is integrated into another project of mine called HomePortal. You can use ShoppingListApp within that project, but it\u2019s perfectly fine to set it up on its own as well. Let\u2019s get started!</p>"},{"location":"start/#pre-requisites","title":"Pre-requisites","text":"<p>Before you dive in, make sure you have the following installed on your machine:</p> <ul> <li>Docker</li> <li>Docker Compose</li> <li>Git</li> </ul>"},{"location":"start/#method-1-using-git","title":"Method 1: Using Git","text":"<p>Clone the repository onto your machine with the following command:</p> <pre><code>git clone git@github.com:Evanlab02/ShoppingListApp.git\n</code></pre>"},{"location":"start/#step-1-create-a-env-file","title":"Step 1: Create a .env File","text":"<p>Set up a <code>.env</code> file in the root of your project that looks similar to this:</p> <pre><code># POSTGRES CONFIG\nPOSTGRES_PASSWORD=&lt;PASSWORD_OF_YOUR_CHOOSING&gt;\nPOSTGRES_DB=shopping-db\n\n# PGADMIN CONFIG\nPGADMIN_DEFAULT_EMAIL=&lt;EMAIL_OF_YOUR_CHOOSING&gt;\nPGADMIN_DEFAULT_PASSWORD=&lt;PASSWORD_OF_YOUR_CHOOSING&gt;\n\n# SHOPPING APP CONFIG\nSHOPPING_DJANGO_KEY=&lt;SOMETHING_LONGER_THAN_50_CHARACTERS_CONTAINING_SPECIAL_CHARACTERS&gt;\nSHOPPING_DJANGO_HOST=localhost\nSHOPPING_DATABASE_NAME=shopping-db\nSHOPPING_DATABASE_USER=postgres\nSHOPPING_DATABASE_PASSWORD=&lt;PASSWORD_USED_ABOVE_FOR_POSTGRES_PASSWORD&gt;\nSHOPPING_DB_HOST=shopping-db\nSHOPPING_DB_PORT=5432\nSHOPPING_DEFAULT_SETTINGS_MODULE=shoppingapp.settings.settings\n</code></pre> <p>You only need to adjust the following values:</p> <ul> <li><code>POSTGRES_PASSWORD</code></li> <li><code>PGADMIN_DEFAULT_EMAIL</code></li> <li><code>PGADMIN_DEFAULT_PASSWORD</code></li> <li><code>SHOPPING_DJANGO_KEY</code></li> <li><code>SHOPPING_DATABASE_PASSWORD</code></li> <li><code>SHOPPING_DJANGO_HOST</code></li> </ul>"},{"location":"start/#step-2-run-using-docker","title":"Step 2: Run Using Docker","text":"<p>Once you\u2019ve set up your <code>.env</code> variables, you can run the app using Docker:</p> <pre><code>docker compose pull\ndocker compose up -d\n</code></pre>"},{"location":"start/#step-3-create-your-superuser","title":"Step 3: Create Your Superuser","text":"<p>To access all the cool features, you need to create a superuser. Run the following command:</p> <pre><code>docker exec -it shopping-django-admin python manage.py createsuperuser\n</code></pre>"},{"location":"start/#step-4-login-and-use-the-shopping-list-app","title":"Step 4: Login and Use the Shopping List App","text":"<p>Congratulations! You should now be able to log in and access the Shopping List App on your host. Happy shopping! \ud83d\uded2</p>"},{"location":"start/#method-2-using-pre-packaged-zip","title":"Method 2: Using Pre-packaged Zip","text":"<p>COMING SOON!</p>"},{"location":"admin/","title":"Resetting API Clients","text":"<p>The ShoppingListApp offers an API that lets users integrate with the platform in any way they choose\u2014whether it\u2019s building a CLI, a web app, or something else entirely. To interact with the API, users need an API key. However, sometimes API keys can be lost, compromised, or need to be reset.</p> <p>Below, we\u2019ll walk through how an admin can reset an API client to allow a user to generate a new API key. Note: Users have some steps to follow before this process, which will be detailed in the API guides.</p>"},{"location":"admin/#resetting-the-api-client-via-the-admin-page","title":"Resetting the API Client via the Admin Page","text":"<p>To reset a user\u2019s API access, follow these steps:</p> <p></p> <p>In the screenshot above, you\u2019ll see that the user/client is marked as \"inactive.\" This status usually means the user has reported their API key as compromised or lost, and they want to generate a new one to regain access to the API.</p>"},{"location":"admin/#steps-to-reset-the-api-client","title":"Steps to Reset the API Client:","text":"<ol> <li> <p>Verify the client's status: Confirm that the client is indeed inactive, indicating they\u2019ve requested a reset due to a compromised key.</p> </li> <li> <p>Delete the existing API client: This is as simple as clicking the delete button. Once the API client has been deleted, the user will no longer be able to access the API with their old key.</p> </li> <li> <p>User recreates the API key: Once the client has been deleted, the user can follow the process to generate a new API key and regain access to the API.</p> </li> </ol> <p>That\u2019s it! Deleting the API client is the main step you need to take, and the user will be able to recreate a new token and continue using the APIs.</p>"},{"location":"api/","title":"Creating your token","text":"<p>To consume the API, you will require a token.</p> <p>This token you can create by navigating to the token url: /token <p>You will be shown this page:</p> <p></p> <p>If you click on yes, you will be provided a token you can use to access the API.</p>"},{"location":"api/#your-token-is-compromised-and-needs-to-be-revoked","title":"Your token is compromised and needs to be revoked","text":"<p>You can visit the same page and click on the button that says: <code>My token is compromised</code></p> <p>This will disable your token, to get a new token, you will first need someone with admin privileges to delete the existing record that exists in relation to your account. This is covered here</p>"},{"location":"api/consume/","title":"Consuming the API","text":"<p>You can access the OpenAPI documentation at the following url: /api/v1/docs <p>NOTE: The dashboard endpoints are secured using session/cookie auth and do not require an API token.</p>"},{"location":"api/consume/#accessing-endpoints-that-are-secured-by-the-token","title":"Accessing endpoints that are secured by the token","text":"<p>There is combination of session and token auth used here to secure the endpoints. This means you will need to login using the /api/v1/auth/login endpoint before using other endpoints with your token.</p> <p>Currently this will be using your account username and password, in future we will allow you to create an alternative username and password for these endpoints that still link to your account for extra security.</p> <p>This means you will also have to have some sort of session in your implementation when querying these endpoints to keep the cookie saved between API calls. You could login everytime you make an API call but this is expensive on the API and in future this will be prevented using rate-limiting.</p> <p>In future, I would also like to create a package that you can consume to access this API but that is not in the works right now.</p>"},{"location":"api/consume/#examples","title":"Examples","text":""},{"location":"api/consume/#python-using-requests","title":"Python - Using requests","text":"<pre><code>from requests import Session\n\nsession = Session()\n\nresult = session.post(\n    \"http://localhost:80/api/v1/auth/login\",\n    json={\"username\": \"\", \"password\": \"\"},\n)\n\nresult = session.get(\n    \"http://localhost:80/api/v1/stores\", headers={\"X-API-Key\": \"\"}\n)\n</code></pre>"},{"location":"code/","title":"Overview of architecture","text":""},{"location":"code/#components","title":"Components","text":"<ul> <li>Caddy (Reverse Proxy)</li> <li>Django Application (Backend/API)</li> <li>Postgres (Database)</li> <li>Django Admin Container</li> <li>PgAdmin</li> </ul>"},{"location":"code/#caddy-reverse-proxy","title":"Caddy (Reverse Proxy)","text":"<p>The entry point for the ShoppingListApp, from a browser perspective, is the Caddy container. This container is based on the Caddy image and handles the majority of static file serving, along with forwarding requests to appropriate services based on URL paths.</p>"},{"location":"code/#static-files","title":"Static Files","text":"<p>Caddy serves static assets, such as CSS and JS files, which include:</p> <ul> <li>Static files used by Django templates.</li> <li>Static files generated by the React dashboard.</li> <li>Any other required static files.</li> </ul>"},{"location":"code/#reverse-proxy-setup","title":"Reverse Proxy Setup","text":"<p>Caddy is also responsible for routing requests to different services within the architecture. Below is an example of the Caddyfile used in this setup:</p> <pre><code>:80 {\n    # Proxy requests to the Django app\n    handle_path /* {\n        reverse_proxy shopping-django-app:80\n    }\n\n    # Proxy API requests from the React app to the Django app\n    handle_path /apis/shopping/* {\n        reverse_proxy shopping-django-app:80\n    }\n\n    # Serve static files required by the Django app\n    handle_path /static/* {\n        root * /var/www/html/static/\n        file_server\n    }\n\n    # Serve static files for the React dashboard\n    handle_path /shopping/dashboard/* {\n        root * /var/www/html/site/\n        file_server\n    }\n\n    # Proxy requests to PgAdmin\n    handle_path /pgadmin* {\n        rewrite * /pgadmin{uri}\n        reverse_proxy shopping-pgadmin:80\n    }\n}\n</code></pre> <p>In summary, Caddy handles:</p> <ul> <li>Proxying requests to the Django app (including API requests from the React dashboard).</li> <li>Serving static files.</li> <li>Proxying requests to the PgAdmin interface.</li> </ul>"},{"location":"code/#django-application-backendapi","title":"Django Application (Backend/API)","text":"<p>The Django application serves as the backend for the ShoppingListApp. It provides two main functions:</p> <ol> <li> <p>Serving application content: Using Django templates, the application dynamically renders and delivers web pages.</p> </li> <li> <p>Providing a REST API: The app exposes an API that allows users to interact programmatically with their shopping lists, enabling the development of external tools such as CLIs or additional web apps.</p> </li> </ol> <p>We\u2019ll explore the application\u2019s functionality in more detail in a later section.</p>"},{"location":"code/#postgres-database","title":"Postgres (Database)","text":"<p>The Postgres database is the heart of data storage for the ShoppingListApp. It stores all shopping lists, users, items, and related data, ensuring that all information is safe and available for retrieval by the Django app.</p>"},{"location":"code/#django-admin-container","title":"Django Admin Container","text":"<p>The Django Admin Container provides a convenient interface for running management commands (<code>manage.py</code>) directly from within the app\u2019s environment. This is especially useful for tasks such as:</p> <ul> <li>Creating superusers: When setting up the application for the first time, admins can create superusers without needing to connect to the database manually.</li> </ul> <p>This container helps avoid the need to use external tools or database clients to perform basic administrative functions.</p>"},{"location":"code/#pgadmin","title":"PgAdmin","text":"<p>PgAdmin is bundled with the app as a web-based database management tool for Postgres. While it\u2019s not necessary for daily operations (as most management tasks can be handled via the app), PgAdmin can be useful for advanced database management and querying in rare situations.</p>"},{"location":"code/pattern/","title":"App Structure","text":"<p>NOTE: In this context, an app refers to a Django App, which is isolated piece of the project.</p> <p>I structure all of the apps using the same patterns. Not all components of this pattern are used everywhere, but they will very rarely deviate from the components that will be outlined below.</p>"},{"location":"code/pattern/#repositories-services-and-routers-api","title":"Repositories, Services and Routers (API)","text":"<p>I split the apps into three main parts when developing API endpoints.</p> <ul> <li>Repositories<ul> <li>The data layer, responsibility is to get the data. Does not worry about business logic.</li> </ul> </li> <li>Services<ul> <li>The business logic layer, uses the repositories to get the data, and then applies the necessary logic to that data.</li> </ul> </li> <li>Routers<ul> <li>Utilizes the services, and is responsible for returning the result and is the entry point.</li> </ul> </li> </ul> <p></p>"},{"location":"upgrade/0_18_0/","title":"Upgrade Guide (V0.18.0)","text":"<p>For this release, there have been no breaking changes. Everything should still work without any intervention but in case it does not, or you want finer control over your upgrade. Please review the below.</p>"},{"location":"upgrade/0_18_0/#argon2-password-hashing","title":"Argon2 Password Hashing","text":"<p>One of the major changes in this update, is the fact that the application has switched over to using Argon2 for password hashing. When logging in it should automatically upgrade your hash to the Argon2 spec from the previous hashers.</p> <p>This is a setting that is enabled by default and can be disabled. You can set the env var (<code>SHOPPING_ALLOW_LEGACY_HASHING</code>) to <code>0</code> to disable this. This means that users will not be able to login unless their passwords are hashed with Argon2.</p> <p>As mentioned before, this will be enabled by default and will require no intervention, meaning your users should automatically be upgraded to Argon2.</p> <p>NOTE: You should get all your users to move to Argon2 with a new login as the old hashing algorithms will be deprecated as part of V1.</p> <p>We recommend leaving this enabled.</p>"},{"location":"upgrade/0_18_0/#force-legacy-hashing","title":"Force legacy hashing","text":"<p>If for any reason, the new hashing algorithms do not work on your machine. You can disable it by passing the env var (<code>SHOPPING_FORCE_LEGACY_HASHING</code>) as <code>1</code> to disable Argon2 and use the legacy hashers.</p> <p>This is not recommended as is only intended as an escape hatch while issues are resolved. Please ensure to get this resolved ASAP as this will be deprecated as part of V1. Meaning your users will be locked out if not migrated to Argon2.</p>"},{"location":"web/","title":"Logging into the Shopping List App","text":"<p>When you first open the Shopping List App, you\u2019ll be greeted by the following page:</p> <p></p> <p>If you already have an account, you can log in here using your username and password. Please note that your email is not a valid username. During the account creation process, you chose a username, and that\u2019s what you\u2019ll use to log in.</p>"},{"location":"web/#registering","title":"Registering","text":"<p>If you don\u2019t have an account yet, click the Register button to head to the registration page:</p> <p></p> <p>Once you\u2019re ready, fill out the necessary information and click on Create Account. After that, you can proceed to log in with your new credentials. </p>"},{"location":"web/dashboard/","title":"The dashboard page","text":"<p>Once logged in, you will see the dashboard:</p> <p></p> <p>NOTE: This page is still under construction, we will add more info here in future.</p>"},{"location":"web/dashboard/#total-items","title":"Total items","text":"<p>COMING SOON</p>"},{"location":"web/dashboard/#price-of-shopping-list","title":"Price of shopping list","text":"<p>COMING SOON</p>"},{"location":"web/dashboard/#budget-remaining","title":"Budget remaining","text":"<p>COMING SOON</p>"},{"location":"web/dashboard/#average-item-price","title":"Average item price","text":"<p>COMING SOON</p>"},{"location":"web/dashboard/#history-chart","title":"History Chart","text":"<p>COMING SOON</p>"},{"location":"web/dashboard/#recent-items","title":"Recent items","text":"<p>COMING SOON</p>"},{"location":"web/items/","title":"Items","text":"<p>To view all the items you have created you can click on the Shop Icon within the purple card on the dashboard page:</p> <p></p> <p>You can also click on the 3 dots icon, and a dialog will open, which will have a button that will allow you to view your items.</p> <p></p> <p></p>"},{"location":"web/items/#items-page","title":"Items Page","text":"<p>This page shows all the items you've created, and you can navigate to their details, edit, or delete them from here. You can also access the store details to view all items in that store and the store info.</p> <p>Heads-up: While other users can use the items you add, only you have the power to edit or delete them.</p> <p>Want to see everyone's items? No problem! You can access the page to view items created by all users by clicking the highlighted button in the screenshot below:</p> <p></p> <p>Note: The button lets you switch back and forth between your personal items and all items.</p> <p></p>"},{"location":"web/items/#create-item","title":"Create Item","text":"<p>To create an item, click the plus-circle button on the items page. Here\u2019s what it looks like:</p> <p></p> <p>On the item creation page, fill in the following details:</p> <ul> <li>Item Name</li> <li>Store it belongs to</li> <li>Price</li> <li>Optionally, add a description.</li> </ul> <p></p> <p>And boom\u2014item created!</p>"},{"location":"web/items/#item-detail-page","title":"Item detail page","text":"<p>After creating an item, you\u2019ll be taken to its detail page.</p> <p>Pro Tip: You can also get to the detail page by clicking on the item\u2019s name in the list view.</p> <p></p> <p>For now, it\u2019s pretty straightforward. You can see the item\u2019s info. Later, one of these cards will show how many shopping lists this item appears on, but for now, we\u2019re keeping things simple.</p> <p>To get back to the item list page, click the little bag icon in the navigation bar.</p>"},{"location":"web/items/#edit-item-page","title":"Edit item page","text":"<p>Need to update an item? Click the pencil icon next to the item you want to change.</p> <p></p> <p>On the update page, you\u2019ll notice placeholders in the fields. These show the current values. Leave any fields blank if you don\u2019t want to change them.</p> <p>In this example, I updated the price of my item \"Coffee\" but left everything else the same:</p> <p></p> <p>Now, when we go back to the list view, we can see the updated price:</p> <p></p>"},{"location":"web/items/#delete-item-page","title":"Delete item page","text":"<p>To delete an item, click the bin icon next to the item you want to remove.</p> <p></p> <p>On the delete page, just hit the \"Delete item\" button, and it\u2019s gone!</p> <p></p>"},{"location":"web/stores/","title":"Stores","text":"<p>To view all the stores that you have created, you can click on the shop icon from the items page:</p> <p></p>"},{"location":"web/stores/#stores-page","title":"Stores page","text":"<p>This page shows all the stores you've created, and you can navigate to their details, edit, or delete them from here. You can access the store details to view all items in that store and the store info.</p> <p>Heads-up: While other users can use the stores you add, only you have the power to edit or delete them.</p> <p>You can switch to the all stores page the same way you would as for the items page.</p>"},{"location":"web/stores/#create-a-store","title":"Create a store","text":"<p>You can click on the plus button in the navigation to create a store from the stores page.</p> <p></p> <p>On the store creation page, fill in the following details:</p> <ul> <li>Store Name</li> <li>The type of store (Online/In-Store/Both)</li> <li>Optionally, add a description.</li> </ul>"},{"location":"web/stores/#store-detail-page","title":"Store detail page","text":"<p>After creating a store, you will be redirected to the store detail page.</p> <p></p> <p>Here you can view all sorts of info about the store, and view all the items that belong to that store.</p>"},{"location":"web/stores/#store-edit-page","title":"Store edit page","text":"<p>You can navigate to the store update page from the stores list page.</p> <p>You can click on the pencil icon to edit it:</p> <p></p> <p></p> <p>On the update page, you\u2019ll notice placeholders in the fields. These show the current values. Leave any fields blank if you don\u2019t want to change them.</p>"},{"location":"web/stores/#delete-store-page","title":"Delete store page","text":"<p>To delete an store, click the bin icon next to the store you want to remove.</p> <p></p> <p>On the delete page, just hit the \"Delete item\" button, and it\u2019s gone!</p> <p></p>"}]}